generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  doctor        Boolean?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  patientProfile PatientProfile? @relation("PatientProfileToUser")
  doctorProfile  DoctorProfile?  @relation("DoctorProfileToUser")

  doctorAppointments   Appointment[]  @relation("DoctorAppointments")
  patientAppointments  Appointment[]  @relation("PatientAppointments")
  doctorPrescriptions  Prescription[] @relation("DoctorPrescriptions")
  patientPrescriptions Prescription[] @relation("PatientPrescriptions")

  accounts           Account[]
  sessions           Session[]
  doctorConnections  Connection[] @relation("DoctorToPatient")
  patientConnections Connection[] @relation("PatientToDoctor")

  @@map("user")
}

model PatientProfile {
  id        String @id @default(uuid())
  userEmail String @unique
  user      User   @relation("PatientProfileToUser", fields: [userEmail], references: [email], onDelete: Cascade)

  firstName         String?
  lastName          String?
  image             String?
  phoneNumber       String?
  series            String?
  cnp               String?
  birthDate         DateTime?
  gender            String?
  address           String?
  city              String?
  county            String?
  zipCode           String?
  emergencyFirst    String?
  emergencyLast     String?
  emergencyRelation String?
  emergencyPhone    String?

  familyDoctor      String?
  familyDoctorPhone String?
  bloodType         String?
  rhFactor          String?
  weight            Float?
  height            Float?
}

model DoctorProfile {
  id                      String    @id @default(uuid())
  userEmail               String    @unique
  user                    User      @relation("DoctorProfileToUser", fields: [userEmail], references: [email], onDelete: Cascade)
  firstName               String?
  lastName                String?
  image                   String?
  phoneNumber             String?
  series                  String?
  cnp                     String?
  birthDate               DateTime?
  gender                  String?
  specialization          String?
  specializationIssueDate DateTime?
  cabinetName             String?
  cabinetPhone            String?
  cabinetAddress          String?
  cabinetCity             String?
  cabinetCounty           String?
  cabinetZipCode          String?

  cmrSeries         String?
  cmrNumber         String?
  cmrIssueDate      DateTime?
  cmrExpirationDate DateTime?

  digiSigSeries         String?
  digiSigNumber         String?
  digiSigIssueDate      DateTime?
  digiSigExpirationDate DateTime?

  appointmentDuration Int?
  appointmentPrice    Int?
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Connection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  accepted  Boolean
  patientId String
  doctorId  String
  doctor    User     @relation("DoctorToPatient", fields: [doctorId], references: [id], onDelete: Cascade)
  patient   User     @relation("PatientToDoctor", fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, doctorId])
}

model Appointment {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  appointmentDate     DateTime
  appointmentPrice    Int?
  appointmentDuration Int

  patientId String
  doctorId  String
  doctor    User   @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)
  patient   User   @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
}

model Prescription {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  startingDate   DateTime
  endingDate     DateTime
  patientId      String
  doctorId       String
  dosage         String
  frequency      String
  diagnostic     String
  instructions   String
  medicationName String
  quantity       String

  patientName    String
  doctorName     String
  cabinetName    String
  cabinetPhone   String
  cabinetAddress String

  doctor  User @relation("DoctorPrescriptions", fields: [doctorId], references: [id], onDelete: Cascade)
  patient User @relation("PatientPrescriptions", fields: [patientId], references: [id], onDelete: Cascade)
}
